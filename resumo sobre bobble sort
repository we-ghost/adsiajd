O algoritmo Bubble Sort em Python funciona por comparação e troca de elementos adjacentes até que a lista esteja ordenada. A cada passagem, o maior elemento se move para o fim da lista, como uma bolha de ar. Este é um algoritmo simples, mas menos eficiente para grandes conjuntos de dados. 
Código em Python:
Python

def bubble_sort(lista):
  n = len(lista)
  for i in range(n):
    for j in range(0, n - i - 1):
      if lista[j] > lista[j + 1]:
        lista[j], lista[j + 1] = lista[j + 1], lista[j]
Explicação:
Função bubble_sort(lista): Recebe a lista a ser ordenada como argumento.
n = len(lista): Armazena o tamanho da lista.
Loop externo (for i in range(n)): Controla o número de passagens pela lista. O loop externo itera n-1 vezes, pois o último elemento estará no lugar correto depois das primeiras n-1 passagens.
Loop interno (for j in range(0, n - i - 1)): Compara elementos adjacentes. n - i - 1 é usado para evitar verificar elementos que já estão na posição correta no final.
if lista[j] > lista[j + 1]: Verifica se os elementos adjacentes estão fora de ordem.
lista[j], lista[j + 1] = lista[j + 1], lista[j]: Troca os elementos se estiverem fora de ordem. Essa troca simultânea é uma forma eficiente de intercâmbio em Python. 
Exemplo de uso:
Python

lista = [64, 34, 25, 12, 22, 11, 90]
bubble_sort(lista)
print("Lista ordenada:", lista)  # Saída: Lista ordenada: [11, 12, 22, 25, 34, 64, 90]
Considerações:
O Bubble Sort tem uma complexidade de tempo de O(n²) no pior e no caso médio, o que o torna ineficiente para grandes conjuntos de dados.
No melhor caso (lista já ordenada), a complexidade de tempo é O(n).
É um algoritmo de ordenação simples, fácil de entender e implementar, mas não recomendado para grandes conjuntos de dados. 
